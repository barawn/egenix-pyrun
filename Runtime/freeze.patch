diff -u -U 5 -p ../Python-2.7.1/Tools/freeze/freeze.py freeze/freeze.py
--- ../Python-2.7.1/Tools/freeze/freeze.py	2004-07-18 08:16:08.000000000 +0200
+++ freeze/freeze.py	2011-04-12 19:17:49.517009541 +0200
@@ -452,11 +452,11 @@ def main():
         makeconfig.makeconfig(infp, outfp, builtins)
     finally:
         outfp.close()
     infp.close()
 
-    cflags = ['$(OPT)']
+    cflags = ['$(BASECFLAGS)', '$(OPT)']
     cppflags = defines + includes
     libs = [os.path.join(binlib, 'libpython$(VERSION).a')]
 
     somevars = {}
     if os.path.exists(makefile_in):
diff -u -U 5 -p ../Python-2.7.1/Tools/freeze/makefreeze.py freeze/makefreeze.py
--- ../Python-2.7.1/Tools/freeze/makefreeze.py	2004-07-18 08:16:08.000000000 +0200
+++ freeze/makefreeze.py	2011-04-12 19:17:49.518010149 +0200
@@ -14,17 +14,35 @@ trailer = """\
 };
 """
 
 # if __debug__ == 0 (i.e. -O option given), set Py_OptimizeFlag in frozen app.
 default_entry_point = """
+
+/* For Py_GetArgcArgv(); set by main() */
+static char **orig_argv;
+static int  orig_argc;
+
+/* Make the *original* argc/argv available to other modules.
+   This is rare, but it is needed by the secureware extension. */
+
+void
+Py_GetArgcArgv(int *argc, char ***argv)
+{
+    *argc = orig_argc;
+    *argv = orig_argv;
+}
+
 int
 main(int argc, char **argv)
 {
         extern int Py_FrozenMain(int, char **);
 """ + ((not __debug__ and """
         Py_OptimizeFlag++;
 """) or "")  + """
+        orig_argc = argc;	/* For Py_GetArgcArgv() */
+        orig_argv = argv;
+
         PyImport_FrozenModules = _PyImport_FrozenModules;
         return Py_FrozenMain(argc, argv);
 }
 
 """
Only in freeze: .svn
diff -u -U 5 -p ../Python-2.7.1/Tools/freeze/winmakemakefile.py freeze/winmakemakefile.py
--- ../Python-2.7.1/Tools/freeze/winmakemakefile.py	2010-11-26 09:10:41.000000000 +0100
+++ freeze/winmakemakefile.py	2011-04-12 19:17:49.520009966 +0200
@@ -18,12 +18,29 @@ int WINAPI WinMain(
 """
 
 SERVICETEMPLATE = """
 extern int PythonService_main(int, char **);
 
+/* For Py_GetArgcArgv(); set by main() */
+static char **orig_argv;
+static int  orig_argc;
+
+/* Make the *original* argc/argv available to other modules.
+   This is rare, but it is needed by the secureware extension. */
+
+void
+Py_GetArgcArgv(int *argc, char ***argv)
+{
+    *argc = orig_argc;
+    *argv = orig_argv;
+}
+
 int main( int argc, char **argv)
 {
+    orig_argc = argc;	/* For Py_GetArgcArgv() */
+    orig_argv = argv;
+
     PyImport_FrozenModules = _PyImport_FrozenModules;
     return PythonService_main(argc, argv);
 }
 """
 
