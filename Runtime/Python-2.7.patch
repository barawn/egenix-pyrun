--- Modules/getpath.c.orig	2012-04-23 00:02:04.266427614 +0200
+++ Modules/getpath.c	2012-04-23 00:40:49.654193120 +0200
@@ -448,10 +448,21 @@ calculate_path(void)
         if (progpath[0] != SEP && progpath[0] != '\0')
                 absolutize(progpath);
         strncpy(argv0_path, progpath, MAXPATHLEN);
         argv0_path[MAXPATHLEN] = '\0';
 
+    /* For PyRun we don't need all the machinery to setup sys.path, since
+       we're doing that in pyrun.py, so just use some sane defaults and
+       return. */
+    if (Py_FrozenFlag) {
+	strncpy(prefix, PREFIX, MAXPATHLEN);
+	strncpy(exec_prefix, EXEC_PREFIX, MAXPATHLEN);
+	module_search_path = (char *)PyMem_Malloc(MAXPATHLEN);
+	strncpy(module_search_path, PREFIX "/lib/python" VERSION, MAXPATHLEN);
+	return;
+    }
+
 #ifdef WITH_NEXT_FRAMEWORK
         /* On Mac OS X we have a special case if we're running from a framework.
         ** This is because the python home should be set relative to the library,
         ** which is in the framework, not relative to the executable, which may
         ** be outside of the framework. Except when we're in the build directory...
--- Modules/_sqlite/connection.c~       2012-04-10 01:07:33.000000000 +0200
+++ Modules/_sqlite/connection.c        2012-05-04 12:34:04.890776045 +0200
@@ -547,11 +547,11 @@ void _pysqlite_set_result(sqlite3_contex
     if ((!py_val) || PyErr_Occurred()) {
         sqlite3_result_null(context);
     } else if (py_val == Py_None) {
         sqlite3_result_null(context);
     } else if (PyInt_Check(py_val)) {
-        sqlite3_result_int64(context, (sqlite3_int64)PyInt_AsLong(py_val));
+        sqlite3_result_int64(context, (sqlite_int64)PyInt_AsLong(py_val));
     } else if (PyLong_Check(py_val)) {
         sqlite3_result_int64(context, PyLong_AsLongLong(py_val));
     } else if (PyFloat_Check(py_val)) {
         sqlite3_result_double(context, PyFloat_AsDouble(py_val));
     } else if (PyBuffer_Check(py_val)) {
@@ -578,11 +578,11 @@ PyObject* _pysqlite_build_py_params(sqli
     PyObject* args;
     int i;
     sqlite3_value* cur_value;
     PyObject* cur_py_value;
     const char* val_str;
-    sqlite3_int64 val_int;
+    sqlite_int64 val_int;
     Py_ssize_t buflen;
     void* raw_buffer;

     args = PyTuple_New(argc);
     if (!args) {
