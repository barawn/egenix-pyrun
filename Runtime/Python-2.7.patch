diff -ur -x importlib.h -x Setup /home/lemburg/egenix/projects/PyRun/Python-2.7.17/Lib/lib2to3/pgen2/driver.py ./Lib/lib2to3/pgen2/driver.py
--- /home/lemburg/egenix/projects/PyRun/Python-2.7.17/Lib/lib2to3/pgen2/driver.py	2019-10-19 20:38:44.000000000 +0200
+++ ./Lib/lib2to3/pgen2/driver.py	2019-11-17 15:19:33.471467314 +0100
@@ -111,6 +111,14 @@
     head, tail = os.path.splitext(gt)
     if tail == ".txt":
         tail = ""
+    # eGenix PyRun support using pyrun_grammar.py to avoid having to
+    # carry around the grammar files
+    if gt == '<pyrun>/lib2to3/Grammar.txt':
+        import pyrun_grammar
+        return pyrun_grammar.load_python_grammar()
+    elif gt == '<pyrun>/lib2to3/PatternGrammar.txt':
+        import pyrun_grammar
+        return pyrun_grammar.load_pattern_grammar()
     return head + tail + ".".join(map(str, sys.version_info)) + ".pickle"
 
 
diff -ur -x importlib.h -x Setup /home/lemburg/egenix/projects/PyRun/Python-2.7.17/Lib/lib2to3/refactor.py ./Lib/lib2to3/refactor.py
--- /home/lemburg/egenix/projects/PyRun/Python-2.7.17/Lib/lib2to3/refactor.py	2019-10-19 20:38:44.000000000 +0200
+++ ./Lib/lib2to3/refactor.py	2019-11-17 15:19:33.507467709 +0100
@@ -33,6 +33,16 @@
 
 def get_all_fix_names(fixer_pkg, remove_prefix=True):
     """Return a sorted list of all available fix names in the given package."""
+
+    # For eGenix PyRun we read the list from the config module
+    if __file__.startswith('<pyrun>') and fixer_pkg == 'lib2to3.fixes':
+        import pyrun_config
+        if remove_prefix:
+            return pyrun_config.lib2to3_fixes
+        else:
+            return ['fix_%s' % name
+                    for name in pyrun_config.lib2to3_fixes]
+
     pkg = __import__(fixer_pkg, [], [], ["*"])
     fix_names = []
     for finder, name, ispkg in pkgutil.iter_modules(pkg.__path__):
diff -ur -x importlib.h -x Setup /home/lemburg/egenix/projects/PyRun/Python-2.7.17/Lib/pkgutil.py ./Lib/pkgutil.py
--- /home/lemburg/egenix/projects/PyRun/Python-2.7.17/Lib/pkgutil.py	2019-10-19 20:38:44.000000000 +0200
+++ ./Lib/pkgutil.py	2019-11-17 15:19:33.531467972 +0100
@@ -273,20 +273,27 @@
         return self.etc[2]==imp.PKG_DIRECTORY
 
     def get_code(self, fullname=None):
+        # eGenix PyRun needs pkgutil to also work for frozen modules,
+        # since pkgutil is used by the runpy module, which is needed
+        # to implement the -m command line switch.
+        if self.code is not None:
+            return self.code
         fullname = self._fix_name(fullname)
-        if self.code is None:
-            mod_type = self.etc[2]
-            if mod_type==imp.PY_SOURCE:
-                source = self.get_source(fullname)
-                self.code = compile(source, self.filename, 'exec')
-            elif mod_type==imp.PY_COMPILED:
-                self._reopen()
-                try:
-                    self.code = read_code(self.file)
-                finally:
-                    self.file.close()
-            elif mod_type==imp.PKG_DIRECTORY:
-                self.code = self._get_delegate().get_code()
+        mod_type = self.etc[2]
+        if mod_type == imp.PY_FROZEN:
+            self.code = imp.get_frozen_object(fullname)
+            return self.code
+        elif mod_type==imp.PY_SOURCE:
+            source = self.get_source(fullname)
+            self.code = compile(source, self.filename, 'exec')
+        elif mod_type==imp.PY_COMPILED:
+            self._reopen()
+            try:
+                self.code = read_code(self.file)
+            finally:
+                self.file.close()
+        elif mod_type==imp.PKG_DIRECTORY:
+            self.code = self._get_delegate().get_code()
         return self.code
 
     def get_source(self, fullname=None):
diff -ur -x importlib.h -x Setup /home/lemburg/egenix/projects/PyRun/Python-2.7.17/Modules/getpath.c ./Modules/getpath.c
--- /home/lemburg/egenix/projects/PyRun/Python-2.7.17/Modules/getpath.c	2019-10-19 20:38:44.000000000 +0200
+++ ./Modules/getpath.c	2019-11-17 15:19:33.795470867 +0100
@@ -442,6 +442,17 @@
         strncpy(argv0_path, progpath, MAXPATHLEN);
         argv0_path[MAXPATHLEN] = '\0';
 
+    /* For PyRun we don't need all the machinery to setup sys.path, since
+       we're doing that in pyrun.py, so just use some sane defaults and
+       return. */
+    if (Py_FrozenFlag) {
+        strncpy(prefix, PREFIX, MAXPATHLEN);
+        strncpy(exec_prefix, EXEC_PREFIX, MAXPATHLEN);
+        module_search_path = (char *)PyMem_Malloc(MAXPATHLEN + 1);
+        strncpy(module_search_path, PREFIX "/lib/python" VERSION, MAXPATHLEN);
+        return;
+    }
+
 #ifdef WITH_NEXT_FRAMEWORK
         /* On Mac OS X we have a special case if we're running from a framework.
         ** This is because the python home should be set relative to the library,
diff -ur -x importlib.h -x Setup /home/lemburg/egenix/projects/PyRun/Python-2.7.17/Python/import.c ./Python/import.c
--- /home/lemburg/egenix/projects/PyRun/Python-2.7.17/Python/import.c	2019-10-19 20:38:44.000000000 +0200
+++ ./Python/import.c	2019-11-17 15:19:33.863471612 +0100
@@ -2146,7 +2146,7 @@
         if (err != 0)
             goto err_return;
     }
-    m = PyImport_ExecCodeModuleEx(name, co, "<frozen>");
+    m = PyImport_ExecCodeModule(name, co);
     if (m == NULL)
         goto err_return;
     Py_DECREF(co);
diff -ur -x importlib.h -x Setup /home/lemburg/egenix/projects/PyRun/Python-2.7.17/Python/sysmodule.c ./Python/sysmodule.c
--- /home/lemburg/egenix/projects/PyRun/Python-2.7.17/Python/sysmodule.c	2019-10-19 20:38:44.000000000 +0200
+++ ./Python/sysmodule.c	2019-11-17 15:19:33.863471612 +0100
@@ -916,6 +916,50 @@
 Clear the internal type lookup cache.");
 
 
+/*** PyRun Extension ***************************************************/
+
+#define SYS_SETFLAG(c_flag, flag_name)		\
+    if (strcmp(flagname, flag_name) == 0) {	\
+	old_value = c_flag;			\
+	if (value != -1)			\
+	    c_flag = value;			\
+    } else
+
+static PyObject *
+sys_setflag(PyObject* self, PyObject* args)
+{
+    char *flagname;
+    int value = -1, old_value = value;
+
+    if (!PyArg_ParseTuple(args, "s|i", &flagname, &value))
+        goto onError;
+
+    SYS_SETFLAG(Py_DebugFlag, "debug")
+    SYS_SETFLAG(Py_OptimizeFlag, "optimize")
+    SYS_SETFLAG(Py_DontWriteBytecodeFlag, "dont_write_bytecode")
+    SYS_SETFLAG(Py_VerboseFlag, "verbose")
+    SYS_SETFLAG(Py_HashRandomizationFlag, "hash_randomization")
+    SYS_SETFLAG(Py_InspectFlag, "inspect")
+    {
+        PyErr_SetString(PyExc_ValueError,
+                        "unknown flag name");
+	goto onError;
+    }
+    return PyInt_FromLong((long)old_value);
+
+ onError:
+    return NULL;
+}
+
+#undef SYS_SETFLAG
+
+PyDoc_STRVAR(sys_setflag__doc__,
+"_setflag(flagname, value) -> old_value\n\
+Set the given interpreter flag and return its previous value.");
+
+/*** End of PyRun Extension ***********************************************/
+
+
 static PyMethodDef sys_methods[] = {
     /* Might as well keep this in alphabetic order */
     {"callstats", (PyCFunction)PyEval_GetCallStats, METH_NOARGS,
@@ -978,6 +1022,7 @@
     {"setdlopenflags", sys_setdlopenflags, METH_VARARGS,
      setdlopenflags_doc},
 #endif
+    {"_setflag", sys_setflag, METH_VARARGS, sys_setflag__doc__},
     {"setprofile",      sys_setprofile, METH_O, setprofile_doc},
     {"getprofile",      sys_getprofile, METH_NOARGS, getprofile_doc},
     {"setrecursionlimit", sys_setrecursionlimit, METH_VARARGS,
