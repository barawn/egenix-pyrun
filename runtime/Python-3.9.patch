diff -ur -x importlib.h -x Setup /home/lemburg/egenix/projects/PyRun/Python-3.9.7/Lib/distutils/sysconfig.py ./Lib/distutils/sysconfig.py
--- /home/lemburg/egenix/projects/PyRun/Python-3.9.7/Lib/distutils/sysconfig.py	2021-08-30 21:02:15.000000000 +0200
+++ ./Lib/distutils/sysconfig.py	2021-10-21 17:07:56.916718133 +0200
@@ -444,6 +444,10 @@
         platform=sys.platform,
         multiarch=getattr(sys.implementation, '_multiarch', ''),
     ))
+    # Make sure we create a valid Python module name and not
+    # a name like _sysconfigdata_m_linux_x86_64-linux-gnu as is
+    # done by the original Python sources
+    name = name.replace('-', '_')
     _temp = __import__(name, globals(), locals(), ['build_time_vars'], 0)
     build_time_vars = _temp.build_time_vars
     global _config_vars
diff -ur -x importlib.h -x Setup /home/lemburg/egenix/projects/PyRun/Python-3.9.7/Lib/importlib/_bootstrap.py ./Lib/importlib/_bootstrap.py
--- /home/lemburg/egenix/projects/PyRun/Python-3.9.7/Lib/importlib/_bootstrap.py	2021-08-30 21:02:15.000000000 +0200
+++ ./Lib/importlib/_bootstrap.py	2021-10-21 17:07:56.916718133 +0200
@@ -810,6 +810,10 @@
 
     @classmethod
     def find_spec(cls, fullname, path=None, target=None):
+        if fullname == '__main__':
+            # The main module will be loaded by the import.c loader
+            # and doesn't need to be loaded again.
+            return None
         if _imp.is_frozen(fullname):
             return spec_from_loader(fullname, cls, origin=cls._ORIGIN)
         else:
@@ -822,6 +826,10 @@
         This method is deprecated.  Use find_spec() instead.
 
         """
+        if fullname == '__main__':
+            # The main module will be loaded by the import.c loader
+            # and doesn't need to be loaded again.
+            return None
         return cls if _imp.is_frozen(fullname) else None
 
     @classmethod
@@ -835,6 +843,7 @@
             raise ImportError('{!r} is not a frozen module'.format(name),
                               name=name)
         code = _call_with_frames_removed(_imp.get_frozen_object, name)
+        module.__file__ = code.co_filename
         exec(code, module.__dict__)
 
     @classmethod
diff -ur -x importlib.h -x Setup /home/lemburg/egenix/projects/PyRun/Python-3.9.7/Lib/lib2to3/pgen2/driver.py ./Lib/lib2to3/pgen2/driver.py
--- /home/lemburg/egenix/projects/PyRun/Python-3.9.7/Lib/lib2to3/pgen2/driver.py	2021-08-30 21:02:15.000000000 +0200
+++ ./Lib/lib2to3/pgen2/driver.py	2021-10-21 17:07:56.916718133 +0200
@@ -107,6 +107,14 @@
     head, tail = os.path.splitext(gt)
     if tail == ".txt":
         tail = ""
+    # eGenix PyRun support using pyrun_grammar.py to avoid having to
+    # carry around the grammar files
+    if gt == '<pyrun>/lib2to3/Grammar.txt':
+        import pyrun_grammar
+        return pyrun_grammar.load_python_grammar()
+    elif gt == '<pyrun>/lib2to3/PatternGrammar.txt':
+        import pyrun_grammar
+        return pyrun_grammar.load_pattern_grammar()
     return head + tail + ".".join(map(str, sys.version_info)) + ".pickle"
 
 
diff -ur -x importlib.h -x Setup /home/lemburg/egenix/projects/PyRun/Python-3.9.7/Lib/lib2to3/refactor.py ./Lib/lib2to3/refactor.py
--- /home/lemburg/egenix/projects/PyRun/Python-3.9.7/Lib/lib2to3/refactor.py	2021-08-30 21:02:15.000000000 +0200
+++ ./Lib/lib2to3/refactor.py	2021-10-21 17:07:56.916718133 +0200
@@ -30,6 +30,16 @@
 
 def get_all_fix_names(fixer_pkg, remove_prefix=True):
     """Return a sorted list of all available fix names in the given package."""
+
+    # For eGenix PyRun we read the list from the config module
+    if __file__.startswith('<pyrun>') and fixer_pkg == 'lib2to3.fixes':
+        import pyrun_config
+        if remove_prefix:
+            return pyrun_config.lib2to3_fixes
+        else:
+            return ['fix_%s' % name
+                    for name in pyrun_config.lib2to3_fixes]
+
     pkg = __import__(fixer_pkg, [], [], ["*"])
     fix_names = []
     for finder, name, ispkg in pkgutil.iter_modules(pkg.__path__):
diff -ur -x importlib.h -x Setup /home/lemburg/egenix/projects/PyRun/Python-3.9.7/Lib/pkgutil.py ./Lib/pkgutil.py
--- /home/lemburg/egenix/projects/PyRun/Python-3.9.7/Lib/pkgutil.py	2021-08-30 21:02:15.000000000 +0200
+++ ./Lib/pkgutil.py	2021-10-21 17:07:56.916718133 +0200
@@ -316,20 +316,27 @@
         return self.etc[2]==imp.PKG_DIRECTORY
 
     def get_code(self, fullname=None):
+        # eGenix PyRun needs pkgutil to also work for frozen modules,
+        # since pkgutil is used by the runpy module, which is needed
+        # to implement the -m command line switch.
+        if self.code is not None:
+            return self.code
         fullname = self._fix_name(fullname)
-        if self.code is None:
-            mod_type = self.etc[2]
-            if mod_type==imp.PY_SOURCE:
-                source = self.get_source(fullname)
-                self.code = compile(source, self.filename, 'exec')
-            elif mod_type==imp.PY_COMPILED:
-                self._reopen()
-                try:
-                    self.code = read_code(self.file)
-                finally:
-                    self.file.close()
-            elif mod_type==imp.PKG_DIRECTORY:
-                self.code = self._get_delegate().get_code()
+        mod_type = self.etc[2]
+        if mod_type == imp.PY_FROZEN:
+            self.code = imp.get_frozen_object(fullname)
+            return self.code
+        elif mod_type==imp.PY_SOURCE:
+            source = self.get_source(fullname)
+            self.code = compile(source, self.filename, 'exec')
+        elif mod_type==imp.PY_COMPILED:
+            self._reopen()
+            try:
+                self.code = read_code(self.file)
+            finally:
+                self.file.close()
+        elif mod_type==imp.PKG_DIRECTORY:
+            self.code = self._get_delegate().get_code()
         return self.code
 
     def get_source(self, fullname=None):
diff -ur -x importlib.h -x Setup /home/lemburg/egenix/projects/PyRun/Python-3.9.7/Lib/sysconfig.py ./Lib/sysconfig.py
--- /home/lemburg/egenix/projects/PyRun/Python-3.9.7/Lib/sysconfig.py	2021-08-30 21:02:15.000000000 +0200
+++ ./Lib/sysconfig.py	2021-10-21 17:07:56.916718133 +0200
@@ -352,12 +352,16 @@
 
 
 def _get_sysconfigdata_name():
-    return os.environ.get('_PYTHON_SYSCONFIGDATA_NAME',
+    name = os.environ.get('_PYTHON_SYSCONFIGDATA_NAME',
         '_sysconfigdata_{abi}_{platform}_{multiarch}'.format(
         abi=sys.abiflags,
         platform=sys.platform,
         multiarch=getattr(sys.implementation, '_multiarch', ''),
     ))
+    # Make sure we create a valid Python module name and not
+    # a name like _sysconfigdata_m_linux_x86_64-linux-gnu as is
+    # done by the original Python sources
+    return name.replace('-', '_')
 
 
 def _generate_posix_vars():
diff -ur -x importlib.h -x Setup /home/lemburg/egenix/projects/PyRun/Python-3.9.7/Makefile.pre.in ./Makefile.pre.in
--- /home/lemburg/egenix/projects/PyRun/Python-3.9.7/Makefile.pre.in	2021-08-30 21:02:15.000000000 +0200
+++ ./Makefile.pre.in	2021-10-21 17:07:56.916718133 +0200
@@ -128,6 +128,10 @@
 MULTIARCH=	@MULTIARCH@
 MULTIARCH_CPPFLAGS = @MULTIARCH_CPPFLAGS@
 
+# Name of the _sysconfigdata Python module
+SYSCONFIGDATA_NAME = $(subst -,_,_sysconfigdata_$(ABIFLAGS)_$(MACHDEP)_$(MULTIARCH))
+SYSCONFIGDATA_PY = $(SYSCONFIGDATA_NAME).py
+
 # Install prefix for architecture-independent files
 prefix=		@prefix@
 
@@ -612,8 +616,12 @@
 	fi
 
 # This is shared by the math and cmath modules
-Modules/_math.o: Modules/_math.c Modules/_math.h
-	$(CC) -c $(CCSHARED) $(PY_CORE_CFLAGS) -o $@ $<
+#
+# eGenix PyRun builds the _math.o file via Setup, so we don't need this
+# separate target.
+#
+#Modules/_math.o: Modules/_math.c Modules/_math.h
+#	$(CC) -c $(CCSHARED) $(PY_CORE_CFLAGS) -o $@ $<
 
 # blake2s is auto-generated from blake2b
 $(srcdir)/Modules/_blake2/blake2s_impl.c: $(srcdir)/Modules/_blake2/blake2b_impl.c $(srcdir)/Modules/_blake2/blake2b2s.py
@@ -1543,7 +1551,7 @@
 			esac; \
 		done; \
 	done
-	$(INSTALL_DATA) `cat pybuilddir.txt`/_sysconfigdata_$(ABIFLAGS)_$(MACHDEP)_$(MULTIARCH).py \
+	$(INSTALL_DATA) `cat pybuilddir.txt`/$(SYSCONFIGDATA_PY) \
 		$(DESTDIR)$(LIBDEST); \
 	$(INSTALL_DATA) $(srcdir)/LICENSE $(DESTDIR)$(LIBDEST)/LICENSE.txt
 	if test -d $(DESTDIR)$(LIBDEST)/distutils/tests; then \
@@ -1699,7 +1707,7 @@
 		--install-scripts=$(BINDIR) \
 		--install-platlib=$(DESTSHARED) \
 		--root=$(DESTDIR)/
-	-rm $(DESTDIR)$(DESTSHARED)/_sysconfigdata_$(ABIFLAGS)_$(MACHDEP)_$(MULTIARCH).py
+	-rm $(DESTDIR)$(DESTSHARED)/$(SYSCONFIGDATA_PY)
 	-rm -r $(DESTDIR)$(DESTSHARED)/__pycache__
 
 # Here are a couple of targets for MacOSX again, to install a full
diff -ur -x importlib.h -x Setup /home/lemburg/egenix/projects/PyRun/Python-3.9.7/Python/import.c ./Python/import.c
--- /home/lemburg/egenix/projects/PyRun/Python-3.9.7/Python/import.c	2021-08-30 21:02:15.000000000 +0200
+++ ./Python/import.c	2021-10-22 11:58:22.013786482 +0200
@@ -1449,6 +1449,23 @@
     if (d == NULL) {
         goto err_return;
     }
+
+    /* Remember the filename as the __file__ attribute, for all frozen modules
+       except the special _frozen_importlib one (doing this breaks
+       bootstrapping for some reason)
+
+       Note: this function is only called during startup of the interpreter
+       and by C extensions. All other imports of frozen modules are handled by
+       the importlib. See importlib._bootstrap.FrozenImporter for details.
+
+    */
+    if (PyUnicode_CompareWithASCIIString(name, "_frozen_importlib") != 0) {
+	if (PyDict_SetItemString(d,
+				 "__file__",
+				 ((PyCodeObject *)co)->co_filename))
+	    PyErr_Clear(); /* Not important enough to report */
+    }
+
     m = exec_code_in_module(tstate, name, d, co);
     if (m == NULL) {
         goto err_return;
@@ -1515,8 +1532,12 @@
 static void
 remove_importlib_frames(PyThreadState *tstate)
 {
+/*  eGenix PyRun provides its own frozen version of these modules:
     const char *importlib_filename = "<frozen importlib._bootstrap>";
     const char *external_filename = "<frozen importlib._bootstrap_external>";
+ */
+    const char *importlib_filename = "<pyrun>/importlib/_bootstrap.py";
+    const char *external_filename = "<pyrun>/importlib/_bootstrap.py";
     const char *remove_frames = "_call_with_frames_removed";
     int always_trim = 0;
     int in_importlib = 0;
diff -ur -x importlib.h -x Setup /home/lemburg/egenix/projects/PyRun/Python-3.9.7/Python/preconfig.c ./Python/preconfig.c
--- /home/lemburg/egenix/projects/PyRun/Python-3.9.7/Python/preconfig.c	2021-08-30 21:02:15.000000000 +0200
+++ ./Python/preconfig.c	2021-10-22 12:01:00.143399121 +0200
@@ -286,7 +286,13 @@
 
        Py_UTF8Mode=1 enables the UTF-8 mode. PYTHONUTF8 environment variable
        is ignored (even if use_environment=1). */
-    config->utf8_mode = 0;
+
+    /* For eGenix PyRun we use UTF-8 as default.  This should provide a
+       better user experience than the Python default of using the locale
+       settings for determining the stdin/stdout encodings.  */
+    /*config->utf8_mode = 0;*/
+    config->utf8_mode = 1;
+
     config->coerce_c_locale = 0;
     config->coerce_c_locale_warn = 0;
 
@@ -312,7 +318,13 @@
        environment variables. */
     config->coerce_c_locale = -1;
     config->coerce_c_locale_warn = -1;
-    config->utf8_mode = -1;
+
+    /* For eGenix PyRun we use UTF-8 as default.  This should provide a
+       better user experience than the Python default of using the locale
+       settings for determining the stdin/stdout encodings.  */
+    /*config->utf8_mode = -1;*/
+    config->utf8_mode = 1;
+
 #ifdef MS_WINDOWS
     config->legacy_windows_fs_encoding = 0;
 #endif
@@ -328,7 +340,13 @@
     config->configure_locale = 0;
     config->isolated = 1;
     config->use_environment = 0;
-    config->utf8_mode = 0;
+
+    /* For eGenix PyRun we use UTF-8 as default.  This should provide a
+       better user experience than the Python default of using the locale
+       settings for determining the stdin/stdout encodings.  */
+    /*config->utf8_mode = 0;*/
+    config->utf8_mode = 1;
+
     config->dev_mode = 0;
 #ifdef MS_WINDOWS
     config->legacy_windows_fs_encoding = 0;
diff -ur -x importlib.h -x Setup /home/lemburg/egenix/projects/PyRun/Python-3.9.7/Python/sysmodule.c ./Python/sysmodule.c
--- /home/lemburg/egenix/projects/PyRun/Python-3.9.7/Python/sysmodule.c	2021-08-30 21:02:15.000000000 +0200
+++ ./Python/sysmodule.c	2021-10-21 17:07:56.916718133 +0200
@@ -1931,6 +1931,54 @@
 
 
 
+/*** eGenix PyRun Extension ***********************************************/
+
+#define SYS_SETFLAG(c_flag, config_flag, flag_name, c_value, config_value) \
+    if (strcmp(flagname, flag_name) == 0) {	\
+	old_value = c_flag;			\
+	if (value != -1) {			\
+	    c_flag = c_value;                   \
+	    config->config_flag = config_value; \
+	}			                \
+    } else
+
+static PyObject *
+sys_setflag(PyObject* self, PyObject* args)
+{
+    char *flagname;
+    int value = -1, old_value = value;
+    PyInterpreterState *interp = _PyInterpreterState_Get();
+    PyConfig *config = &interp->config;
+
+    if (!PyArg_ParseTuple(args, "s|i", &flagname, &value))
+        goto onError;
+
+    SYS_SETFLAG(Py_DebugFlag, parser_debug, "debug", value, value)
+    SYS_SETFLAG(Py_OptimizeFlag, optimization_level, "optimize", value, value)
+    SYS_SETFLAG(Py_DontWriteBytecodeFlag, write_bytecode, "dont_write_bytecode", value, !value)
+    SYS_SETFLAG(Py_VerboseFlag, verbose, "verbose", value, value)
+    SYS_SETFLAG(Py_HashRandomizationFlag, use_hash_seed, "hash_randomization", value, value)
+    SYS_SETFLAG(Py_InspectFlag, inspect, "inspect", value, value)
+    {
+        PyErr_SetString(PyExc_ValueError,
+                        "unknown flag name");
+	goto onError;
+    }
+    return PyLong_FromLong((long)old_value);
+
+ onError:
+    return NULL;
+}
+
+#undef SYS_SETFLAG
+
+PyDoc_STRVAR(sys_setflag__doc__,
+"_setflag(flagname, value) -> old_value\n\
+Set the given interpreter flag and return its previous value.");
+
+/*** End of eGenix PyRun Extension ****************************************/
+
+
 static PyMethodDef sys_methods[] = {
     /* Might as well keep this in alphabetic order */
     SYS_ADDAUDITHOOK_METHODDEF
@@ -1968,6 +2016,7 @@
     SYS_SETSWITCHINTERVAL_METHODDEF
     SYS_GETSWITCHINTERVAL_METHODDEF
     SYS_SETDLOPENFLAGS_METHODDEF
+    {"_setflag", sys_setflag, METH_VARARGS, sys_setflag__doc__},
     {"setprofile",      sys_setprofile, METH_O, setprofile_doc},
     SYS_GETPROFILE_METHODDEF
     SYS_SETRECURSIONLIMIT_METHODDEF
