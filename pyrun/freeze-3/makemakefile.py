# Write the actual Makefile.

import os

def filter_module_ldflags(value):
    """ Helper to make the generated Makefile work with Python 3.11+
        source Makefiles.

        The problem is that the new module configurations for module
        LDFLAGS include definitions for static libs. Those are compiled
        into the static Python lib and not needed, nor available to the
        Makefile we generate for the freeze command.

        As a work-around, we remove all non-shared lib references from
        the LDFLAGS settings of modules in the generated Makefile.

    """
    args = value.split()
    shared_libs = [
        arg
        for arg in args
        if arg.startswith('-l')
    ]
    return ' '.join(shared_libs)

def makemakefile(outfp, makevars, files, target):
    outfp.write("# Makefile generated by freeze.py script\n\n")

    keys = sorted(makevars.keys())
    for key in keys:
        value = makevars[key]
        if key.startswith('MODULE_') and key.endswith('_LDFLAGS'):
            # generated module configurations in Python 3.11+
            value = filter_module_ldflags(value)
        outfp.write("%s=%s\n" % (key, value))
    outfp.write("\nall: %s\n\n" % target)

    deps = []
    for i in range(len(files)):
        file = files[i]
        if file[-2:] == '.c':
            base = os.path.basename(file)
            dest = base[:-2] + '.o'
            outfp.write("%s: %s\n" % (dest, file))
            outfp.write("\t$(CC) $(PY_CFLAGS) $(PY_CPPFLAGS) -c %s\n" % file)
            files[i] = dest
            deps.append(dest)

    outfp.write("\n%s: %s\n" % (target, ' '.join(deps)))
    outfp.write("\t$(LINKCC) $(PY_LDFLAGS) $(LINKFORSHARED) %s -o %s $(LDLAST)\n" %
                (' '.join(files), target))

    outfp.write("\nclean:\n\t-rm -f *.o %s\n" % target)
